{"version":3,"sources":["logo.svg","pages/JobCard.js","pages/Job.js","pages/CandidatePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","JobCard","job","this","props","className","Row","Col","src","img","xs","title","salary","benefits","map","benefit","tags","tag","Badge","variant","isHotjob","city","district","moment","time","fromNow","Component","Jobs","query","URLSearchParams","useLocation","search","history","useHistory","useState","get","keyword","jobs","setJobs","getData","a","fetch","data","json","result","console","log","useEffect","e","filteredJobs","preventDefault","push","encodeURIComponent","filter","toLowerCase","includes","handleSearch","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Container","item","key","Details","App","isAuthenticated","user","ProtectedRoute","to","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6bd3b524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Col,Row,Badge} from \"react-bootstrap\"\r\nimport moment from \"moment\"\r\nexport default class JobCard extends Component {\r\n    render() {\r\n        const job = this.props.job\r\n        return (\r\n            <div>\r\n                   <div className=\"job-content\">\r\n                  \r\n      <Row>\r\n        <Col>\r\n          <div className=\"jobcard-logo m-5\">\r\n            <img src={job.img} />\r\n          </div>\r\n        </Col>\r\n        <Col xs={8}>\r\n          <div className=\"jobcard-descriptions\">\r\n            <h2 className=\"jobcard-title\">{job.title}</h2>\r\n            <div>$ {job.salary}</div>\r\n            <div>\r\n              <ul className=\"benefit-list\">\r\n                {job.benefits.map(benefit => (\r\n                  <li>{benefit}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              {job.tags.map(tag => (\r\n                <Badge variant=\"secondary\" className=\"badge-style\">\r\n                  {tag}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <div className=\"date-location-box\">\r\n            {job.isHotjob ? (\r\n              <div className=\"hotjob-label\">Hot Job</div>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n\r\n            <div className=\"jobcard-location\">\r\n              <div>{job.city}</div>\r\n              <div>District {job.district}</div>\r\n            </div>\r\n            <div className=\"job-time\">{moment(job.time).fromNow()}</div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {useEffect,useState} from \"react\";\r\nimport {Container} from \"react-bootstrap\"\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport JobCard from \"./JobCard.js\"\r\nimport {Col,Row,Badge,Nav,NavDropdown,Navbar} from \"react-bootstrap\"\r\nimport moment from \"moment\"\r\nexport default function Jobs() {\r\n    function useQuery() {\r\n        return new URLSearchParams(useLocation().search);\r\n        }\r\n    let query = useQuery();\r\n    let history = useHistory();\r\n    const QUERYSTR_PREFIX = \"q\";\r\n    let [keyword, setKeyword] = useState(query.get(QUERYSTR_PREFIX));\r\n    let [jobs,setJobs] = useState([])\r\n    const handleSearch = (e) => {\r\n        let filteredJobs;\r\n\r\n        if (e) {\r\n          e.preventDefault();\r\n          history.push(`/jobs/?${QUERYSTR_PREFIX}=${encodeURIComponent(keyword)}`);\r\n        }\r\n        if (keyword) {\r\n            filteredJobs = jobs.filter(job =>\r\n            job.title.toLowerCase().includes(keyword.toLowerCase())\r\n            );\r\n          }\r\n          setJobs(filteredJobs);\r\n      };\r\n    \r\n    const getData = async () => {\r\n        let url =`https://my-json-server.typicode.com/NgoTheHieu/itviec/db`;\r\n        let data = await fetch(url);\r\n        let result = await data.json();\r\n        setJobs(result.jobs);\r\n        console.log(result);\r\n      };\r\n    \r\n     useEffect(() => {\r\n        getData();\r\n        handleSearch();\r\n      }, []);\r\n    \r\n  return (\r\n    <div>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n  <Navbar.Brand href=\"#home\">\r\n      <img src=\"    public/logo.png\"/>\r\n  </Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"#features\"></Nav.Link>\r\n      <Nav.Link href=\"#pricing\"></Nav.Link>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n      <Container>\r\n       {jobs && jobs.map(item => <JobCard job={item} key={item.id} />)}\r\n    </Container>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Details(props) {\r\n  console.log({ props });\r\n  return (\r\n    <div>\r\n      <h1>Job detail page</h1>\r\n    </div>\r\n  );\r\n}   ","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport Jobs from \"./pages/Job\";\n// import Login from \"./pages/Login\";\nimport Details from \"./pages/CandidatePage\";\n\nfunction App() {\n  const [user, setUser] = useState({ isAuthenticated: true });\n  const FourOhFourPage = () => {\n    return (\n      <div>\n        <h1>404 Not Found</h1>\n      </div>\n    );\n  };\n  const ProtectedRoute = (props) => {\n    if (user.isAuthenticated === true) {\n      return <Route {...props} />;\n    } else {\n      return <Redirect to=\"/login\" />;\n    }\n  };\n  return (\n    <Switch>\n      <ProtectedRoute\n          path=\"/job/:id\"\n          render={(props) => <Details {...props} />}\n        />\n    <Route path=\"/Detail\" component={Details}/>\n    <Route path=\"/jobs\" component={Jobs}/>\n    {/* <Route path=\"/Login\" component={Login}/> */}\n    <Route path=\"*\" component={FourOhFourPage} />\n    \n</Switch>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    \n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}